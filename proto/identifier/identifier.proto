syntax = "proto3";
package allinbits.cosmoscash.identifier;

option go_package = "github.com/allinbits/cosmos-cash/x/identifier/types";

import "gogoproto/gogo.proto";

/*
This represents a minimal self-managed did document
definition: https://w3c.github.io/did-core/

{
  "@context": "https://www.w3.org/ns/did/v1",
  "id": "did:example:123456789abcdefghi",
  "authentication": [{
    "id": "did:example:123456789abcdefghi#keys-1",
    "type": "Ed25519VerificationKey2018",
    "controller": "did:example:123456789abcdefghi",
    "publicKeyBase58": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
  }],
  "service": [{
    "id":"did:example:123456789abcdefghi#vcs",
    "type": "VerifiableCredentialService",
    "serviceEndpoint": "https://example.com/vc/"
  }]
}
*/

// DidDocument represents a dencentralised identifer.
message DidDocument {
  // @context is spec for did document.
  repeated string context                          = 1;

  // id represents the id for the did document.
  string id                                        = 2;

  // A DID controller is an entity that is authorized to make changes to a DID document.
  // cfr. https://www.w3.org/TR/did-core/#did-controller
  repeated string controller                       = 3;

  // A DID document can express verification methods, 
  // such as cryptographic public keys, which can be used 
  // to authenticate or authorize interactions with the DID subject or associated parties.
  // https://www.w3.org/TR/did-core/#verification-methods
  repeated VerificationMethod verificationMethods  = 4;

  // Services are used in DID documents to express ways of communicating 
  // with the DID subject or associated entities.
  // https://www.w3.org/TR/did-core/#services
  repeated Service services                        = 5;

  // VerificationRelationships - support structure for proto3 repeated string in map
  message VerificationRelationships {
    repeated string Labels = 1;
  }

  // A verification relationship expresses the relationship between the DID subject and a verification method.
// This enum is used to 
// cfr. https://www.w3.org/TR/did-core/#verification-relationships
  map<string,VerificationRelationships> verificationRelationships = 6;

}

// A DID document can express verification methods, 
// such as cryptographic public keys, which can be used 
// to authenticate or authorize interactions 
// with the DID subject or associated parties. 
// https://www.w3.org/TR/did-core/#verification-methods
message VerificationMethod {
  option (gogoproto.equal) = true;

  string id                = 1;
  string type              = 2;
  string controller        = 3;
  string publicKeyBase58   = 4; // by default we support only publicKeyBase58
}

// Service defines how to find data associated with a identifer
message Service {
  option (gogoproto.equal) = true;

  string id          	   = 1;
  string type         	 = 2;
  string serviceEndpoint = 3;
}

