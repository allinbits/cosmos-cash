syntax = "proto3";
package allinbits.cosmoscash.identifier;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "identifier/identifier.proto";
import "gogoproto/gogo.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/allinbits/cosmos-cash/x/identifier/types";

// this line is used by starport scaffolding # 1

// Query defines the gRPC querier service.
service Query {
  	// Identifers queries all validators that match the given status.
  rpc Identifiers(QueryIdentifiersRequest) returns (QueryIdentifiersResponse) {
    option (google.api.http).get = "/allinbits/identifier/identifiers";
  }
  rpc Identifier(QueryIdentifierRequest) returns (QueryIdentifierResponse) {
    option (google.api.http).get = "/allinbits/identifier/identifiers/{id}";
  }
}

// QueryIdentifersRequest is request type for Query/Identifers RPC method.
message QueryIdentifiersRequest {
  // status enables to query for validators matching a given status.
  string status = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryIdentifersResponse is response type for the Query/Identifers RPC method
message QueryIdentifiersResponse {
  // validators contains all the queried validators.
  repeated DidDocument didDocuments = 1  [(gogoproto.nullable) = false];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryIdentifersRequest is request type for Query/Identifers RPC method.
message QueryIdentifierRequest {
  // status enables to query for validators matching a given status.
  string id = 1;
}

// QueryIdentifersResponse is response type for the Query/Identifers RPC method
message QueryIdentifierResponse {
  // validators contains all the queried validators.
  DidDocument didDocument = 1  [(gogoproto.nullable) = false];
}
// this line is used by starport scaffolding # 3
