syntax = "proto3";
package allinbits.cosmoscash.issuer;

import "gogoproto/gogo.proto";
// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/allinbits/cosmos-cash/x/issuer/types";

// Msg defines the Msg service.
service Msg {
  rpc CreateIssuer(MsgCreateIssuer) returns (MsgCreateIssuerResponse);
  rpc BurnToken(MsgBurnToken) returns (MsgBurnTokenResponse);
  rpc MintToken(MsgMintToken) returns (MsgMintTokenResponse);
}

// MsgCreateIssuer defines a SDK message for creating a new emoney token issuer.
message MsgCreateIssuer {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string    token        = 1; 
  int32     fee          = 2; 
  string    owner        = 3;
}

message MsgCreateIssuerResponse {}

// MsgBurnToken defines a SDK message for burning issuer tokens.
message MsgBurnToken {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string    amount       = 1; 
  string    owner        = 2;
}

message MsgBurnTokenResponse {}


// MsgMintToken defines a SDK message for minting a token
message MsgMintToken {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string    amount       = 1;
  string    owner        = 2;
}

message MsgMintTokenResponse {}


// this line is used by starport scaffolding # proto/tx/message
