// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: verifiable-credential-service/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryVerifiableCredentialsRequest is request type for Query/VerifiableCredentials RPC method.
type QueryVerifiableCredentialsRequest struct {
	// status enables to query for credentials matching a given status.
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryVerifiableCredentialsRequest) Reset()         { *m = QueryVerifiableCredentialsRequest{} }
func (m *QueryVerifiableCredentialsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerifiableCredentialsRequest) ProtoMessage()    {}
func (*QueryVerifiableCredentialsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85a1f9284e9078ab, []int{0}
}
func (m *QueryVerifiableCredentialsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifiableCredentialsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifiableCredentialsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifiableCredentialsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifiableCredentialsRequest.Merge(m, src)
}
func (m *QueryVerifiableCredentialsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifiableCredentialsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifiableCredentialsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifiableCredentialsRequest proto.InternalMessageInfo

func (m *QueryVerifiableCredentialsRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QueryVerifiableCredentialsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryVerifiableCredentialsResponse is response type for the Query/Identifers RPC method
type QueryVerifiableCredentialsResponse struct {
	// validators contains all the queried validators.
	Vcs []VerifiableCredential `protobuf:"bytes,1,rep,name=vcs,proto3" json:"vcs"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryVerifiableCredentialsResponse) Reset()         { *m = QueryVerifiableCredentialsResponse{} }
func (m *QueryVerifiableCredentialsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerifiableCredentialsResponse) ProtoMessage()    {}
func (*QueryVerifiableCredentialsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85a1f9284e9078ab, []int{1}
}
func (m *QueryVerifiableCredentialsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifiableCredentialsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifiableCredentialsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifiableCredentialsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifiableCredentialsResponse.Merge(m, src)
}
func (m *QueryVerifiableCredentialsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifiableCredentialsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifiableCredentialsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifiableCredentialsResponse proto.InternalMessageInfo

func (m *QueryVerifiableCredentialsResponse) GetVcs() []VerifiableCredential {
	if m != nil {
		return m.Vcs
	}
	return nil
}

func (m *QueryVerifiableCredentialsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryVerifiableCredentialRequest is response type for the Query/VerifiableCredential RPC method
type QueryVerifiableCredentialRequest struct {
	// verifiable_credential_id defines the credential id to query for.
	VerifiableCredentialId string `protobuf:"bytes,1,opt,name=verifiable_credential_id,json=verifiableCredentialId,proto3" json:"verifiable_credential_id,omitempty"`
}

func (m *QueryVerifiableCredentialRequest) Reset()         { *m = QueryVerifiableCredentialRequest{} }
func (m *QueryVerifiableCredentialRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerifiableCredentialRequest) ProtoMessage()    {}
func (*QueryVerifiableCredentialRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85a1f9284e9078ab, []int{2}
}
func (m *QueryVerifiableCredentialRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifiableCredentialRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifiableCredentialRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifiableCredentialRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifiableCredentialRequest.Merge(m, src)
}
func (m *QueryVerifiableCredentialRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifiableCredentialRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifiableCredentialRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifiableCredentialRequest proto.InternalMessageInfo

func (m *QueryVerifiableCredentialRequest) GetVerifiableCredentialId() string {
	if m != nil {
		return m.VerifiableCredentialId
	}
	return ""
}

// QueryVerifiableCredentialResponse is response type for the Query/VerifiableCredential RPC method
type QueryVerifiableCredentialResponse struct {
	// verifiable_credential defines the the credential info.
	VerifiableCredential VerifiableCredential `protobuf:"bytes,1,opt,name=verifiable_credential,json=verifiableCredential,proto3" json:"verifiable_credential"`
}

func (m *QueryVerifiableCredentialResponse) Reset()         { *m = QueryVerifiableCredentialResponse{} }
func (m *QueryVerifiableCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerifiableCredentialResponse) ProtoMessage()    {}
func (*QueryVerifiableCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85a1f9284e9078ab, []int{3}
}
func (m *QueryVerifiableCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifiableCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifiableCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifiableCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifiableCredentialResponse.Merge(m, src)
}
func (m *QueryVerifiableCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifiableCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifiableCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifiableCredentialResponse proto.InternalMessageInfo

func (m *QueryVerifiableCredentialResponse) GetVerifiableCredential() VerifiableCredential {
	if m != nil {
		return m.VerifiableCredential
	}
	return VerifiableCredential{}
}

// QueryValidateVerifiableCredentialRequest is response type for the Query/VerifiableCredential RPC method
type QueryValidateVerifiableCredentialRequest struct {
	// verifiable_credential_id defines the credential id to query for.
	VerifiableCredentialId string `protobuf:"bytes,1,opt,name=verifiable_credential_id,json=verifiableCredentialId,proto3" json:"verifiable_credential_id,omitempty"`
	// issuer_pubkey is used to validate to verifiable_credential
	IssuerPubkey string `protobuf:"bytes,2,opt,name=issuer_pubkey,json=issuerPubkey,proto3" json:"issuer_pubkey,omitempty"`
}

func (m *QueryValidateVerifiableCredentialRequest) Reset() {
	*m = QueryValidateVerifiableCredentialRequest{}
}
func (m *QueryValidateVerifiableCredentialRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidateVerifiableCredentialRequest) ProtoMessage()    {}
func (*QueryValidateVerifiableCredentialRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_85a1f9284e9078ab, []int{4}
}
func (m *QueryValidateVerifiableCredentialRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidateVerifiableCredentialRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidateVerifiableCredentialRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidateVerifiableCredentialRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidateVerifiableCredentialRequest.Merge(m, src)
}
func (m *QueryValidateVerifiableCredentialRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidateVerifiableCredentialRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidateVerifiableCredentialRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidateVerifiableCredentialRequest proto.InternalMessageInfo

func (m *QueryValidateVerifiableCredentialRequest) GetVerifiableCredentialId() string {
	if m != nil {
		return m.VerifiableCredentialId
	}
	return ""
}

func (m *QueryValidateVerifiableCredentialRequest) GetIssuerPubkey() string {
	if m != nil {
		return m.IssuerPubkey
	}
	return ""
}

// QueryVerifiableCredentialResponse is response type for the Query/VerifiableCredential RPC method
type QueryValidateVerifiableCredentialResponse struct {
	// is_valid defines if the credential is signed by the correct public key.
	IsValid bool `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
}

func (m *QueryValidateVerifiableCredentialResponse) Reset() {
	*m = QueryValidateVerifiableCredentialResponse{}
}
func (m *QueryValidateVerifiableCredentialResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryValidateVerifiableCredentialResponse) ProtoMessage() {}
func (*QueryValidateVerifiableCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_85a1f9284e9078ab, []int{5}
}
func (m *QueryValidateVerifiableCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidateVerifiableCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidateVerifiableCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidateVerifiableCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidateVerifiableCredentialResponse.Merge(m, src)
}
func (m *QueryValidateVerifiableCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidateVerifiableCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidateVerifiableCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidateVerifiableCredentialResponse proto.InternalMessageInfo

func (m *QueryValidateVerifiableCredentialResponse) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func init() {
	proto.RegisterType((*QueryVerifiableCredentialsRequest)(nil), "allinbits.cosmoscash.verifiablecredentialservice.QueryVerifiableCredentialsRequest")
	proto.RegisterType((*QueryVerifiableCredentialsResponse)(nil), "allinbits.cosmoscash.verifiablecredentialservice.QueryVerifiableCredentialsResponse")
	proto.RegisterType((*QueryVerifiableCredentialRequest)(nil), "allinbits.cosmoscash.verifiablecredentialservice.QueryVerifiableCredentialRequest")
	proto.RegisterType((*QueryVerifiableCredentialResponse)(nil), "allinbits.cosmoscash.verifiablecredentialservice.QueryVerifiableCredentialResponse")
	proto.RegisterType((*QueryValidateVerifiableCredentialRequest)(nil), "allinbits.cosmoscash.verifiablecredentialservice.QueryValidateVerifiableCredentialRequest")
	proto.RegisterType((*QueryValidateVerifiableCredentialResponse)(nil), "allinbits.cosmoscash.verifiablecredentialservice.QueryValidateVerifiableCredentialResponse")
}

func init() {
	proto.RegisterFile("verifiable-credential-service/query.proto", fileDescriptor_85a1f9284e9078ab)
}

var fileDescriptor_85a1f9284e9078ab = []byte{
	// 593 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0x41, 0x6f, 0xd3, 0x3e,
	0x18, 0xc6, 0x9b, 0xee, 0xff, 0x2f, 0x9b, 0x07, 0x17, 0xab, 0x9b, 0x4a, 0x35, 0x85, 0x12, 0x24,
	0xe8, 0x90, 0x1a, 0xb3, 0x22, 0xa1, 0x71, 0xe1, 0x30, 0xa4, 0x22, 0x6e, 0x5b, 0x8a, 0x90, 0x18,
	0x88, 0xe2, 0xa4, 0x26, 0xb3, 0xc8, 0xe2, 0x2c, 0x76, 0x22, 0xaa, 0x69, 0x07, 0xc6, 0x89, 0x1b,
	0x12, 0x37, 0xbe, 0x00, 0xdf, 0x83, 0xd3, 0x2e, 0x48, 0x93, 0xb8, 0x70, 0x42, 0xa8, 0xe5, 0xcc,
	0x67, 0x40, 0x71, 0xbc, 0x66, 0x93, 0xb2, 0x96, 0x4d, 0xd9, 0x2d, 0x7d, 0xeb, 0xf7, 0x79, 0x9f,
	0xe7, 0x67, 0x5b, 0x06, 0xcb, 0x31, 0x09, 0xe9, 0x6b, 0x8a, 0x6d, 0x8f, 0xb4, 0x9c, 0x90, 0xf4,
	0x89, 0x2f, 0x28, 0xf6, 0x5a, 0x9c, 0x84, 0x31, 0x75, 0x08, 0xda, 0x89, 0x48, 0x38, 0x30, 0x83,
	0x90, 0x09, 0x06, 0xef, 0x60, 0xcf, 0xa3, 0xbe, 0x4d, 0x05, 0x37, 0x1d, 0xc6, 0xb7, 0x19, 0x77,
	0x30, 0xdf, 0x32, 0xb3, 0xfe, 0xac, 0x5d, 0x75, 0xd7, 0x97, 0x5c, 0xc6, 0x5c, 0x8f, 0x20, 0x1c,
	0x50, 0x84, 0x7d, 0x9f, 0x09, 0x2c, 0x28, 0xf3, 0x79, 0xaa, 0x57, 0xbf, 0x9d, 0xaa, 0x20, 0x1b,
	0x73, 0x35, 0x08, 0xc5, 0x2b, 0x36, 0x11, 0x78, 0x05, 0x05, 0xd8, 0xa5, 0xbe, 0x5c, 0xac, 0xd6,
	0xde, 0x9f, 0x6c, 0x33, 0xf7, 0x5f, 0xd5, 0x5a, 0x75, 0x99, 0xcb, 0xe4, 0x27, 0x4a, 0xbe, 0xd2,
	0xaa, 0xf1, 0x5e, 0x03, 0xd7, 0x37, 0x92, 0x99, 0x4f, 0xc7, 0xad, 0x0f, 0x33, 0xff, 0x16, 0xd9,
	0x89, 0x08, 0x17, 0x70, 0x11, 0x54, 0xb8, 0xc0, 0x22, 0xe2, 0x35, 0xad, 0xa1, 0x35, 0xe7, 0x2c,
	0xf5, 0x0b, 0x76, 0x00, 0xc8, 0x2c, 0xd6, 0xca, 0x0d, 0xad, 0x39, 0xdf, 0xbe, 0xa9, 0xa8, 0x98,
	0x49, 0x1e, 0x33, 0x05, 0xa7, 0xf2, 0x98, 0xeb, 0xd8, 0x25, 0x4a, 0xd3, 0x3a, 0xd6, 0x69, 0x7c,
	0xd3, 0x80, 0x31, 0xc9, 0x05, 0x0f, 0x98, 0xcf, 0x09, 0x7c, 0x09, 0x66, 0x62, 0x27, 0xf1, 0x30,
	0xd3, 0x9c, 0x6f, 0x77, 0xcc, 0xb3, 0xee, 0x83, 0x99, 0xa7, 0xbe, 0xf6, 0xdf, 0xc1, 0xcf, 0x6b,
	0x25, 0x2b, 0x11, 0x86, 0x8f, 0x72, 0xe2, 0xdc, 0x9a, 0x1a, 0x27, 0x35, 0x77, 0x22, 0xcf, 0x0b,
	0xd0, 0x38, 0x35, 0xce, 0x11, 0xd3, 0x55, 0x50, 0xcb, 0xbc, 0xf6, 0x32, 0xb3, 0x3d, 0xda, 0x57,
	0x94, 0x17, 0xe3, 0x9c, 0xf6, 0xc7, 0x7d, 0xe3, 0xcb, 0xa4, 0x3d, 0x1b, 0xc3, 0x7a, 0xa7, 0x81,
	0x85, 0xdc, 0x01, 0x52, 0xbd, 0x68, 0x7e, 0xd5, 0x3c, 0xaf, 0xc6, 0x07, 0x0d, 0x34, 0x53, 0xa7,
	0xd8, 0xa3, 0x7d, 0x2c, 0xc8, 0x85, 0x00, 0x81, 0x37, 0xc0, 0x15, 0xca, 0x79, 0x44, 0xc2, 0x5e,
	0x10, 0xd9, 0x6f, 0xc8, 0x40, 0x6e, 0xdd, 0x9c, 0x75, 0x39, 0x2d, 0xae, 0xcb, 0x9a, 0xd1, 0x01,
	0xcb, 0xff, 0x60, 0x45, 0xc1, 0xbb, 0x0a, 0x66, 0x29, 0xef, 0xc5, 0xc9, 0x52, 0x39, 0x7b, 0xd6,
	0xba, 0x44, 0xb9, 0xec, 0x6c, 0xff, 0xa9, 0x80, 0xff, 0xa5, 0x10, 0xdc, 0x2f, 0x83, 0x85, 0xdc,
	0x03, 0x0b, 0xbb, 0x67, 0x67, 0x3b, 0xf5, 0x12, 0xd6, 0x9f, 0x14, 0x2b, 0x9a, 0x26, 0x35, 0x1e,
	0xec, 0x7f, 0xff, 0xfd, 0xa9, 0xbc, 0x0a, 0xef, 0xa1, 0xb1, 0x3a, 0xca, 0x95, 0xcc, 0xaf, 0xc2,
	0xcf, 0x65, 0x50, 0xcd, 0x9b, 0x00, 0xad, 0x02, 0xed, 0x1e, 0x21, 0xe8, 0x16, 0xaa, 0xa9, 0x08,
	0x3c, 0x93, 0x04, 0xba, 0x70, 0xe3, 0x7c, 0x04, 0xd0, 0xee, 0x69, 0xa7, 0x76, 0x0f, 0x7e, 0x2d,
	0x83, 0xa5, 0x49, 0xe7, 0x0d, 0x6e, 0x9e, 0x37, 0xd0, 0xf4, 0xfb, 0x54, 0x7f, 0x7e, 0x21, 0xda,
	0x0a, 0x1a, 0x95, 0xd0, 0x1c, 0x88, 0x0b, 0x87, 0x86, 0x76, 0x4f, 0xdc, 0xe5, 0xbd, 0xb5, 0x57,
	0x07, 0x43, 0x5d, 0x3b, 0x1c, 0xea, 0xda, 0xaf, 0xa1, 0xae, 0x7d, 0x1c, 0xe9, 0xa5, 0xc3, 0x91,
	0x5e, 0xfa, 0x31, 0xd2, 0x4b, 0x9b, 0x1d, 0x97, 0x8a, 0xad, 0xc8, 0x36, 0x1d, 0xb6, 0x7d, 0xcc,
	0x46, 0x9a, 0xb5, 0x95, 0x84, 0x45, 0x6f, 0xd1, 0xe4, 0x07, 0x53, 0x0c, 0x02, 0xc2, 0xed, 0x8a,
	0x7c, 0x0b, 0xef, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xfa, 0xb1, 0x83, 0x1f, 0x05, 0x08, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Identifers queries all validators that match the given status.
	VerifiableCredentials(ctx context.Context, in *QueryVerifiableCredentialsRequest, opts ...grpc.CallOption) (*QueryVerifiableCredentialsResponse, error)
	// VerifiableCredential queries validator info for given validator address.
	VerifiableCredential(ctx context.Context, in *QueryVerifiableCredentialRequest, opts ...grpc.CallOption) (*QueryVerifiableCredentialResponse, error)
	// ValidateVerifiableCredential queries validator info for given validator address.
	ValidateVerifiableCredential(ctx context.Context, in *QueryValidateVerifiableCredentialRequest, opts ...grpc.CallOption) (*QueryValidateVerifiableCredentialResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) VerifiableCredentials(ctx context.Context, in *QueryVerifiableCredentialsRequest, opts ...grpc.CallOption) (*QueryVerifiableCredentialsResponse, error) {
	out := new(QueryVerifiableCredentialsResponse)
	err := c.cc.Invoke(ctx, "/allinbits.cosmoscash.verifiablecredentialservice.Query/VerifiableCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerifiableCredential(ctx context.Context, in *QueryVerifiableCredentialRequest, opts ...grpc.CallOption) (*QueryVerifiableCredentialResponse, error) {
	out := new(QueryVerifiableCredentialResponse)
	err := c.cc.Invoke(ctx, "/allinbits.cosmoscash.verifiablecredentialservice.Query/VerifiableCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidateVerifiableCredential(ctx context.Context, in *QueryValidateVerifiableCredentialRequest, opts ...grpc.CallOption) (*QueryValidateVerifiableCredentialResponse, error) {
	out := new(QueryValidateVerifiableCredentialResponse)
	err := c.cc.Invoke(ctx, "/allinbits.cosmoscash.verifiablecredentialservice.Query/ValidateVerifiableCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Identifers queries all validators that match the given status.
	VerifiableCredentials(context.Context, *QueryVerifiableCredentialsRequest) (*QueryVerifiableCredentialsResponse, error)
	// VerifiableCredential queries validator info for given validator address.
	VerifiableCredential(context.Context, *QueryVerifiableCredentialRequest) (*QueryVerifiableCredentialResponse, error)
	// ValidateVerifiableCredential queries validator info for given validator address.
	ValidateVerifiableCredential(context.Context, *QueryValidateVerifiableCredentialRequest) (*QueryValidateVerifiableCredentialResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) VerifiableCredentials(ctx context.Context, req *QueryVerifiableCredentialsRequest) (*QueryVerifiableCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiableCredentials not implemented")
}
func (*UnimplementedQueryServer) VerifiableCredential(ctx context.Context, req *QueryVerifiableCredentialRequest) (*QueryVerifiableCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiableCredential not implemented")
}
func (*UnimplementedQueryServer) ValidateVerifiableCredential(ctx context.Context, req *QueryValidateVerifiableCredentialRequest) (*QueryValidateVerifiableCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateVerifiableCredential not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_VerifiableCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifiableCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerifiableCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/allinbits.cosmoscash.verifiablecredentialservice.Query/VerifiableCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerifiableCredentials(ctx, req.(*QueryVerifiableCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerifiableCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifiableCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerifiableCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/allinbits.cosmoscash.verifiablecredentialservice.Query/VerifiableCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerifiableCredential(ctx, req.(*QueryVerifiableCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidateVerifiableCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidateVerifiableCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidateVerifiableCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/allinbits.cosmoscash.verifiablecredentialservice.Query/ValidateVerifiableCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidateVerifiableCredential(ctx, req.(*QueryValidateVerifiableCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "allinbits.cosmoscash.verifiablecredentialservice.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifiableCredentials",
			Handler:    _Query_VerifiableCredentials_Handler,
		},
		{
			MethodName: "VerifiableCredential",
			Handler:    _Query_VerifiableCredential_Handler,
		},
		{
			MethodName: "ValidateVerifiableCredential",
			Handler:    _Query_ValidateVerifiableCredential_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "verifiable-credential-service/query.proto",
}

func (m *QueryVerifiableCredentialsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifiableCredentialsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifiableCredentialsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifiableCredentialsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifiableCredentialsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifiableCredentialsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Vcs) > 0 {
		for iNdEx := len(m.Vcs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vcs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifiableCredentialRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifiableCredentialRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifiableCredentialRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerifiableCredentialId) > 0 {
		i -= len(m.VerifiableCredentialId)
		copy(dAtA[i:], m.VerifiableCredentialId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VerifiableCredentialId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifiableCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifiableCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifiableCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VerifiableCredential.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryValidateVerifiableCredentialRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidateVerifiableCredentialRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidateVerifiableCredentialRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IssuerPubkey) > 0 {
		i -= len(m.IssuerPubkey)
		copy(dAtA[i:], m.IssuerPubkey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IssuerPubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VerifiableCredentialId) > 0 {
		i -= len(m.VerifiableCredentialId)
		copy(dAtA[i:], m.VerifiableCredentialId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VerifiableCredentialId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidateVerifiableCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidateVerifiableCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidateVerifiableCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsValid {
		i--
		if m.IsValid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryVerifiableCredentialsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifiableCredentialsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vcs) > 0 {
		for _, e := range m.Vcs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifiableCredentialRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VerifiableCredentialId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifiableCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.VerifiableCredential.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryValidateVerifiableCredentialRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VerifiableCredentialId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.IssuerPubkey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidateVerifiableCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsValid {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryVerifiableCredentialsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifiableCredentialsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifiableCredentialsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifiableCredentialsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifiableCredentialsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifiableCredentialsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vcs = append(m.Vcs, VerifiableCredential{})
			if err := m.Vcs[len(m.Vcs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifiableCredentialRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifiableCredentialRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifiableCredentialRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifiableCredentialId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerifiableCredentialId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifiableCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifiableCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifiableCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifiableCredential", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VerifiableCredential.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidateVerifiableCredentialRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidateVerifiableCredentialRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidateVerifiableCredentialRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifiableCredentialId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerifiableCredentialId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidateVerifiableCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidateVerifiableCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidateVerifiableCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsValid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
