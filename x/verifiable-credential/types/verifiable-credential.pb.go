// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: verifiable-credential/verifiable-credential.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VerifiableCredential represents a verifiable credential
type VerifiableCredential struct {
	// @context is spec for verifiable credential.
	Context []string `protobuf:"bytes,1,rep,name=context,proto3" json:"@context,omitempty"`
	// The value of the id property MUST be a single URI. It is RECOMMENDED
	// that the URI in the id be one which, if dereferenced, results in a
	// document containing machine-readable information about the id.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The value of the type property MUST be, or map to (through interpretation
	// of the @context property), one or more URIs. If more than one URI is
	// provided, the URIs MUST be interpreted as an unordered set.
	Type []string `protobuf:"bytes,3,rep,name=type,proto3" json:"type,omitempty"`
	// The value of the issuer property MUST be either a URI or an object
	// containing an id property. It is RECOMMENDED that the URI in the issuer
	// or its id be one which, if dereferenced, results in a document containing
	// machine-readable information about the issuer that can be used to verify
	// the information expressed in the credential.
	Issuer string `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// A credential MUST have an issuanceDate property. The value of the issuanceDate
	// property MUST be a string value of an [RFC3339] combined date and time string
	// representing the date and time the credential becomes valid, which could
	// be a date and time in the future. Note that this value represents the earliest
	// point in time at which the information associated with the credentialSubject
	// property becomes valid.
	IssuanceDate *time.Time `protobuf:"bytes,5,opt,name=issuance_date,json=issuanceDate,proto3,stdtime" json:"issuance_date,omitempty"`
	// The value of the credentialSubject property is defined as a set of
	// objects that contain one or more properties that are each related
	// to a subject of the verifiable credential.
	//
	// Types that are valid to be assigned to CredentialSubject:
	//	*VerifiableCredential_RegulatorCred
	//	*VerifiableCredential_RegistrationCred
	//	*VerifiableCredential_LicenseCred
	//	*VerifiableCredential_UserCred
	CredentialSubject isVerifiableCredential_CredentialSubject `protobuf_oneof:"credential_subject"`
	// One or more cryptographic proofs that can be used to detect tampering
	// and verify the authorship of a credential or presentation. The specific
	// method used for an embedded proof MUST be included using the type property.
	Proof *Proof `protobuf:"bytes,10,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *VerifiableCredential) Reset()         { *m = VerifiableCredential{} }
func (m *VerifiableCredential) String() string { return proto.CompactTextString(m) }
func (*VerifiableCredential) ProtoMessage()    {}
func (*VerifiableCredential) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf6469f22440938e, []int{0}
}
func (m *VerifiableCredential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifiableCredential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifiableCredential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifiableCredential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifiableCredential.Merge(m, src)
}
func (m *VerifiableCredential) XXX_Size() int {
	return m.Size()
}
func (m *VerifiableCredential) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifiableCredential.DiscardUnknown(m)
}

var xxx_messageInfo_VerifiableCredential proto.InternalMessageInfo

type isVerifiableCredential_CredentialSubject interface {
	isVerifiableCredential_CredentialSubject()
	MarshalTo([]byte) (int, error)
	Size() int
}

type VerifiableCredential_RegulatorCred struct {
	RegulatorCred *RegulatorCredentialSubject `protobuf:"bytes,6,opt,name=regulator_cred,json=regulatorCred,proto3,oneof" json:"regulator_cred,omitempty"`
}
type VerifiableCredential_RegistrationCred struct {
	RegistrationCred *RegistrationCredentialSubject `protobuf:"bytes,7,opt,name=registration_cred,json=registrationCred,proto3,oneof" json:"registration_cred,omitempty"`
}
type VerifiableCredential_LicenseCred struct {
	LicenseCred *LicenseCredentialSubject `protobuf:"bytes,8,opt,name=license_cred,json=licenseCred,proto3,oneof" json:"license_cred,omitempty"`
}
type VerifiableCredential_UserCred struct {
	UserCred *UserCredentialSubject `protobuf:"bytes,9,opt,name=user_cred,json=userCred,proto3,oneof" json:"user_cred,omitempty"`
}

func (*VerifiableCredential_RegulatorCred) isVerifiableCredential_CredentialSubject()    {}
func (*VerifiableCredential_RegistrationCred) isVerifiableCredential_CredentialSubject() {}
func (*VerifiableCredential_LicenseCred) isVerifiableCredential_CredentialSubject()      {}
func (*VerifiableCredential_UserCred) isVerifiableCredential_CredentialSubject()         {}

func (m *VerifiableCredential) GetCredentialSubject() isVerifiableCredential_CredentialSubject {
	if m != nil {
		return m.CredentialSubject
	}
	return nil
}

func (m *VerifiableCredential) GetContext() []string {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *VerifiableCredential) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VerifiableCredential) GetType() []string {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *VerifiableCredential) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *VerifiableCredential) GetIssuanceDate() *time.Time {
	if m != nil {
		return m.IssuanceDate
	}
	return nil
}

func (m *VerifiableCredential) GetRegulatorCred() *RegulatorCredentialSubject {
	if x, ok := m.GetCredentialSubject().(*VerifiableCredential_RegulatorCred); ok {
		return x.RegulatorCred
	}
	return nil
}

func (m *VerifiableCredential) GetRegistrationCred() *RegistrationCredentialSubject {
	if x, ok := m.GetCredentialSubject().(*VerifiableCredential_RegistrationCred); ok {
		return x.RegistrationCred
	}
	return nil
}

func (m *VerifiableCredential) GetLicenseCred() *LicenseCredentialSubject {
	if x, ok := m.GetCredentialSubject().(*VerifiableCredential_LicenseCred); ok {
		return x.LicenseCred
	}
	return nil
}

func (m *VerifiableCredential) GetUserCred() *UserCredentialSubject {
	if x, ok := m.GetCredentialSubject().(*VerifiableCredential_UserCred); ok {
		return x.UserCred
	}
	return nil
}

func (m *VerifiableCredential) GetProof() *Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VerifiableCredential) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VerifiableCredential_RegulatorCred)(nil),
		(*VerifiableCredential_RegistrationCred)(nil),
		(*VerifiableCredential_LicenseCred)(nil),
		(*VerifiableCredential_UserCred)(nil),
	}
}

// UserCredentialSubject represents a privacy respecting
// credential_subject of a verifiable credential. This
// is used as an on chain verifiable credential.
type UserCredentialSubject struct {
	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Root       string `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	IsVerified bool   `protobuf:"varint,3,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
}

func (m *UserCredentialSubject) Reset()         { *m = UserCredentialSubject{} }
func (m *UserCredentialSubject) String() string { return proto.CompactTextString(m) }
func (*UserCredentialSubject) ProtoMessage()    {}
func (*UserCredentialSubject) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf6469f22440938e, []int{1}
}
func (m *UserCredentialSubject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserCredentialSubject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserCredentialSubject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserCredentialSubject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCredentialSubject.Merge(m, src)
}
func (m *UserCredentialSubject) XXX_Size() int {
	return m.Size()
}
func (m *UserCredentialSubject) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCredentialSubject.DiscardUnknown(m)
}

var xxx_messageInfo_UserCredentialSubject proto.InternalMessageInfo

func (m *UserCredentialSubject) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserCredentialSubject) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

func (m *UserCredentialSubject) GetIsVerified() bool {
	if m != nil {
		return m.IsVerified
	}
	return false
}

// The LicenseCredential message makes reference to the classes of crypto assets
// described in MiCA, but the license could easily be adopted as proof of
// authority to issue various types of crypto or virtual assets. The LicenseCredential
// is used a a credential_subject in a verifiable credential.
type LicenseCredentialSubject struct {
	// The value of id represents the ID of the credential_subject
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The license type is defined by the MICA regulation. This will
	// be used to identify different asset classes of tokens being issuedi
	// by the credential_subject.
	LicenseType string `protobuf:"bytes,2,opt,name=license_type,json=licenseType,proto3" json:"license_type,omitempty"`
	// The country field represents the country the credential was issued in.
	Country string `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	// The authority field represents a licensing authority that issued the LicenseCredential
	Authority string `protobuf:"bytes,4,opt,name=authority,proto3" json:"authority,omitempty"`
	// The circulation_limit represents the amount of a token
	// that can be minted by a credential_subject.
	CirculationLimit types.Coin `protobuf:"bytes,5,opt,name=circulation_limit,json=circulationLimit,proto3" json:"circulation_limit"`
}

func (m *LicenseCredentialSubject) Reset()         { *m = LicenseCredentialSubject{} }
func (m *LicenseCredentialSubject) String() string { return proto.CompactTextString(m) }
func (*LicenseCredentialSubject) ProtoMessage()    {}
func (*LicenseCredentialSubject) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf6469f22440938e, []int{2}
}
func (m *LicenseCredentialSubject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LicenseCredentialSubject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LicenseCredentialSubject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LicenseCredentialSubject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseCredentialSubject.Merge(m, src)
}
func (m *LicenseCredentialSubject) XXX_Size() int {
	return m.Size()
}
func (m *LicenseCredentialSubject) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseCredentialSubject.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseCredentialSubject proto.InternalMessageInfo

func (m *LicenseCredentialSubject) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LicenseCredentialSubject) GetLicenseType() string {
	if m != nil {
		return m.LicenseType
	}
	return ""
}

func (m *LicenseCredentialSubject) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *LicenseCredentialSubject) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *LicenseCredentialSubject) GetCirculationLimit() types.Coin {
	if m != nil {
		return m.CirculationLimit
	}
	return types.Coin{}
}

// RegulatorCredentialSubject is used to identify regulators
type RegulatorCredentialSubject struct {
	// The value of id represents the ID of the credential_subject
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The value of id represents the name of the credential subject
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The country field represents the country the credential was issued in.
	Country string `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
}

func (m *RegulatorCredentialSubject) Reset()         { *m = RegulatorCredentialSubject{} }
func (m *RegulatorCredentialSubject) String() string { return proto.CompactTextString(m) }
func (*RegulatorCredentialSubject) ProtoMessage()    {}
func (*RegulatorCredentialSubject) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf6469f22440938e, []int{3}
}
func (m *RegulatorCredentialSubject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegulatorCredentialSubject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegulatorCredentialSubject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegulatorCredentialSubject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegulatorCredentialSubject.Merge(m, src)
}
func (m *RegulatorCredentialSubject) XXX_Size() int {
	return m.Size()
}
func (m *RegulatorCredentialSubject) XXX_DiscardUnknown() {
	xxx_messageInfo_RegulatorCredentialSubject.DiscardUnknown(m)
}

var xxx_messageInfo_RegulatorCredentialSubject proto.InternalMessageInfo

func (m *RegulatorCredentialSubject) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RegulatorCredentialSubject) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegulatorCredentialSubject) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

// RegistrationCredentialSubject is used to identify a business entity
type RegistrationCredentialSubject struct {
	// The value of id represents the ID of the credential_subject
	Id          string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LegalPerson map[string]*LegalPerson `protobuf:"bytes,2,rep,name=legal_person,json=legalPerson,proto3" json:"legal_person,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Address     *Address                `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Ids         map[string]*Ids         `protobuf:"bytes,4,rep,name=ids,proto3" json:"ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *RegistrationCredentialSubject) Reset()         { *m = RegistrationCredentialSubject{} }
func (m *RegistrationCredentialSubject) String() string { return proto.CompactTextString(m) }
func (*RegistrationCredentialSubject) ProtoMessage()    {}
func (*RegistrationCredentialSubject) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf6469f22440938e, []int{4}
}
func (m *RegistrationCredentialSubject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistrationCredentialSubject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistrationCredentialSubject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistrationCredentialSubject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationCredentialSubject.Merge(m, src)
}
func (m *RegistrationCredentialSubject) XXX_Size() int {
	return m.Size()
}
func (m *RegistrationCredentialSubject) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationCredentialSubject.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationCredentialSubject proto.InternalMessageInfo

func (m *RegistrationCredentialSubject) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RegistrationCredentialSubject) GetLegalPerson() map[string]*LegalPerson {
	if m != nil {
		return m.LegalPerson
	}
	return nil
}

func (m *RegistrationCredentialSubject) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *RegistrationCredentialSubject) GetIds() map[string]*Ids {
	if m != nil {
		return m.Ids
	}
	return nil
}

type LegalPerson struct {
	LegalPersonNames map[string]*Names `protobuf:"bytes,1,rep,name=legal_person_names,json=legalPersonNames,proto3" json:"legal_person_names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CtryReg          string            `protobuf:"bytes,2,opt,name=ctry_reg,json=ctryReg,proto3" json:"ctry_reg,omitempty"`
}

func (m *LegalPerson) Reset()         { *m = LegalPerson{} }
func (m *LegalPerson) String() string { return proto.CompactTextString(m) }
func (*LegalPerson) ProtoMessage()    {}
func (*LegalPerson) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf6469f22440938e, []int{5}
}
func (m *LegalPerson) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LegalPerson) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LegalPerson.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LegalPerson) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegalPerson.Merge(m, src)
}
func (m *LegalPerson) XXX_Size() int {
	return m.Size()
}
func (m *LegalPerson) XXX_DiscardUnknown() {
	xxx_messageInfo_LegalPerson.DiscardUnknown(m)
}

var xxx_messageInfo_LegalPerson proto.InternalMessageInfo

type Names struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *Names) Reset()         { *m = Names{} }
func (m *Names) String() string { return proto.CompactTextString(m) }
func (*Names) ProtoMessage()    {}
func (*Names) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf6469f22440938e, []int{6}
}
func (m *Names) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Names) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Names.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Names) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Names.Merge(m, src)
}
func (m *Names) XXX_Size() int {
	return m.Size()
}
func (m *Names) XXX_DiscardUnknown() {
	xxx_messageInfo_Names.DiscardUnknown(m)
}

var xxx_messageInfo_Names proto.InternalMessageInfo

type Address struct {
	AddrType string `protobuf:"bytes,1,opt,name=addr_type,json=addrType,proto3" json:"addr_type,omitempty"`
	Thfare   string `protobuf:"bytes,2,opt,name=thfare,proto3" json:"thfare,omitempty"`
	Premise  string `protobuf:"bytes,3,opt,name=premise,proto3" json:"premise,omitempty"`
	Postcode string `protobuf:"bytes,4,opt,name=postcode,proto3" json:"postcode,omitempty"`
	Locality string `protobuf:"bytes,5,opt,name=locality,proto3" json:"locality,omitempty"`
	Country  string `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf6469f22440938e, []int{7}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return m.Size()
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

type Ids struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *Ids) Reset()         { *m = Ids{} }
func (m *Ids) String() string { return proto.CompactTextString(m) }
func (*Ids) ProtoMessage()    {}
func (*Ids) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf6469f22440938e, []int{8}
}
func (m *Ids) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ids) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ids.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ids) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ids.Merge(m, src)
}
func (m *Ids) XXX_Size() int {
	return m.Size()
}
func (m *Ids) XXX_DiscardUnknown() {
	xxx_messageInfo_Ids.DiscardUnknown(m)
}

var xxx_messageInfo_Ids proto.InternalMessageInfo

func (m *Ids) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Ids) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// The Proof message represents a cryptographic proof that the
// credential has not been tampered with or changed without the issuersi
// knowledge. This can be used to verify the verifiable credential.
type Proof struct {
	Type               string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Created            string `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	ProofPurpose       string `protobuf:"bytes,3,opt,name=proof_purpose,json=proofPurpose,proto3" json:"proof_purpose,omitempty"`
	VerificationMethod string `protobuf:"bytes,4,opt,name=verification_method,json=verificationMethod,proto3" json:"verification_method,omitempty"`
	Signature          string `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Proof) Reset()         { *m = Proof{} }
func (m *Proof) String() string { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()    {}
func (*Proof) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf6469f22440938e, []int{9}
}
func (m *Proof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proof.Merge(m, src)
}
func (m *Proof) XXX_Size() int {
	return m.Size()
}
func (m *Proof) XXX_DiscardUnknown() {
	xxx_messageInfo_Proof.DiscardUnknown(m)
}

var xxx_messageInfo_Proof proto.InternalMessageInfo

func (m *Proof) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Proof) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Proof) GetProofPurpose() string {
	if m != nil {
		return m.ProofPurpose
	}
	return ""
}

func (m *Proof) GetVerificationMethod() string {
	if m != nil {
		return m.VerificationMethod
	}
	return ""
}

func (m *Proof) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func init() {
	proto.RegisterType((*VerifiableCredential)(nil), "allinbits.cosmoscash.verifiablecredential.VerifiableCredential")
	proto.RegisterType((*UserCredentialSubject)(nil), "allinbits.cosmoscash.verifiablecredential.UserCredentialSubject")
	proto.RegisterType((*LicenseCredentialSubject)(nil), "allinbits.cosmoscash.verifiablecredential.LicenseCredentialSubject")
	proto.RegisterType((*RegulatorCredentialSubject)(nil), "allinbits.cosmoscash.verifiablecredential.RegulatorCredentialSubject")
	proto.RegisterType((*RegistrationCredentialSubject)(nil), "allinbits.cosmoscash.verifiablecredential.RegistrationCredentialSubject")
	proto.RegisterMapType((map[string]*Ids)(nil), "allinbits.cosmoscash.verifiablecredential.RegistrationCredentialSubject.IdsEntry")
	proto.RegisterMapType((map[string]*LegalPerson)(nil), "allinbits.cosmoscash.verifiablecredential.RegistrationCredentialSubject.LegalPersonEntry")
	proto.RegisterType((*LegalPerson)(nil), "allinbits.cosmoscash.verifiablecredential.LegalPerson")
	proto.RegisterMapType((map[string]*Names)(nil), "allinbits.cosmoscash.verifiablecredential.LegalPerson.LegalPersonNamesEntry")
	proto.RegisterType((*Names)(nil), "allinbits.cosmoscash.verifiablecredential.Names")
	proto.RegisterType((*Address)(nil), "allinbits.cosmoscash.verifiablecredential.Address")
	proto.RegisterType((*Ids)(nil), "allinbits.cosmoscash.verifiablecredential.Ids")
	proto.RegisterType((*Proof)(nil), "allinbits.cosmoscash.verifiablecredential.Proof")
}

func init() {
	proto.RegisterFile("verifiable-credential/verifiable-credential.proto", fileDescriptor_cf6469f22440938e)
}

var fileDescriptor_cf6469f22440938e = []byte{
	// 1043 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xfa, 0x4f, 0x62, 0x3f, 0x27, 0x55, 0x3a, 0xa4, 0xd5, 0xd6, 0x80, 0x1d, 0xcc, 0x25,
	0x95, 0xe8, 0x6e, 0x63, 0x24, 0x04, 0x3d, 0xa0, 0x92, 0x34, 0x55, 0x23, 0x19, 0x14, 0x96, 0x50,
	0x41, 0x85, 0x64, 0xad, 0x77, 0x27, 0xeb, 0x81, 0xf5, 0x8e, 0x35, 0x33, 0x1b, 0x6a, 0xc4, 0x07,
	0xe0, 0xd8, 0x8f, 0xd0, 0x0b, 0x07, 0xee, 0x7c, 0x00, 0x8e, 0x3d, 0x56, 0xe2, 0xc2, 0x85, 0x82,
	0x92, 0x0b, 0xe2, 0x53, 0xa0, 0xf9, 0xb3, 0xde, 0x4d, 0xba, 0x41, 0x18, 0xf5, 0xf6, 0xfe, 0xec,
	0xfb, 0xfd, 0xe6, 0xbd, 0x79, 0xef, 0xcd, 0xc2, 0xce, 0x09, 0x66, 0xe4, 0x98, 0xf8, 0xe3, 0x18,
	0xdf, 0x0a, 0x18, 0x0e, 0x71, 0x22, 0x88, 0x1f, 0xbb, 0xa5, 0x56, 0x67, 0xc6, 0xa8, 0xa0, 0xe8,
	0xa6, 0x1f, 0xc7, 0x24, 0x19, 0x13, 0xc1, 0x9d, 0x80, 0xf2, 0x29, 0xe5, 0x81, 0xcf, 0x27, 0x4e,
	0x1e, 0x91, 0x07, 0x74, 0x36, 0x23, 0x1a, 0x51, 0x15, 0xe5, 0x4a, 0x49, 0x03, 0x74, 0x7a, 0x11,
	0xa5, 0x51, 0x8c, 0x5d, 0xa5, 0x8d, 0xd3, 0x63, 0x57, 0x90, 0x29, 0xe6, 0xc2, 0x9f, 0xce, 0xcc,
	0x07, 0x5d, 0x8d, 0xeb, 0x8e, 0x7d, 0x8e, 0xdd, 0x93, 0x9d, 0x31, 0x16, 0xfe, 0x8e, 0x1b, 0x50,
	0x92, 0x68, 0x7f, 0xff, 0xf7, 0x06, 0x6c, 0x3e, 0x5c, 0xf0, 0xed, 0x2d, 0xf8, 0xd0, 0x6d, 0x58,
	0x0d, 0x68, 0x22, 0xf0, 0x63, 0x61, 0x5b, 0x5b, 0xb5, 0xed, 0xd6, 0xee, 0xf5, 0xbf, 0x5f, 0xf4,
	0xd0, 0x5d, 0x63, 0x7b, 0x87, 0x4e, 0x89, 0xc0, 0xd3, 0x99, 0x98, 0x7b, 0xd9, 0x67, 0xe8, 0x0a,
	0x54, 0x49, 0x68, 0x57, 0xb7, 0xac, 0xed, 0x96, 0x57, 0x25, 0x21, 0x42, 0x50, 0x17, 0xf3, 0x19,
	0xb6, 0x6b, 0x32, 0xdc, 0x53, 0x32, 0xba, 0x0e, 0x2b, 0x84, 0xf3, 0x14, 0x33, 0xbb, 0xae, 0xbe,
	0x33, 0x1a, 0xda, 0x87, 0x75, 0x29, 0xf9, 0x49, 0x80, 0x47, 0xa1, 0x2f, 0xb0, 0xdd, 0xd8, 0xb2,
	0xb6, 0xdb, 0x83, 0x8e, 0xa3, 0xf3, 0x73, 0xb2, 0xfc, 0x9c, 0xa3, 0x2c, 0xbf, 0xdd, 0xfa, 0x93,
	0x3f, 0x7a, 0x96, 0xb7, 0x96, 0x85, 0xdd, 0xf3, 0x05, 0x46, 0x09, 0x5c, 0x61, 0x38, 0x4a, 0x63,
	0x5f, 0x50, 0x36, 0x92, 0xc5, 0xb3, 0x57, 0x14, 0xce, 0xbe, 0xf3, 0x9f, 0x0b, 0xed, 0x78, 0x19,
	0x40, 0x5e, 0x8c, 0xcf, 0xd2, 0xf1, 0xd7, 0x38, 0x10, 0x0f, 0x2a, 0xde, 0x3a, 0x2b, 0x7a, 0xd1,
	0xb7, 0x70, 0x95, 0xe1, 0x88, 0x70, 0xc1, 0x7c, 0x41, 0x68, 0xa2, 0x29, 0x57, 0x15, 0xe5, 0x83,
	0xe5, 0x28, 0x17, 0x18, 0x65, 0xac, 0x1b, 0xec, 0xc2, 0x07, 0x68, 0x02, 0x6b, 0x31, 0x09, 0x70,
	0xc2, 0xb1, 0xe6, 0x6c, 0x2a, 0xce, 0xbd, 0x25, 0x38, 0x87, 0x3a, 0xbc, 0x8c, 0xae, 0x1d, 0xe7,
	0x3e, 0x34, 0x82, 0x56, 0xca, 0xb1, 0xa9, 0x66, 0x4b, 0xd1, 0xdc, 0x5d, 0x82, 0xe6, 0x73, 0x8e,
	0x4b, 0x0b, 0xd9, 0x4c, 0x8d, 0x03, 0xdd, 0x87, 0xc6, 0x8c, 0x51, 0x7a, 0x6c, 0x83, 0x02, 0xbf,
	0xbd, 0x04, 0xf8, 0xa1, 0x8c, 0xf3, 0x74, 0xf8, 0xee, 0x26, 0xa0, 0xdc, 0x35, 0xe2, 0x9a, 0xa9,
	0xff, 0x15, 0x5c, 0x2b, 0x3d, 0x82, 0xe9, 0x56, 0xab, 0xd8, 0xad, 0x8c, 0x52, 0x61, 0xfa, 0x57,
	0xc9, 0xa8, 0x07, 0x6d, 0xc2, 0x47, 0x9a, 0x1a, 0x87, 0x76, 0x6d, 0xcb, 0xda, 0x6e, 0x7a, 0x40,
	0xf8, 0x43, 0x63, 0xe9, 0xff, 0x6a, 0x81, 0x7d, 0x59, 0x21, 0x5f, 0x62, 0x78, 0x2b, 0xbf, 0x33,
	0x35, 0x17, 0x9a, 0x29, 0x2b, 0xf6, 0x91, 0x1c, 0x0f, 0x5b, 0x0e, 0x5d, 0x9a, 0x08, 0x36, 0x57,
	0x64, 0x2d, 0x2f, 0x53, 0xd1, 0x1b, 0xd0, 0xf2, 0x53, 0x31, 0xa1, 0x8c, 0x88, 0xb9, 0x99, 0x9d,
	0xdc, 0x80, 0x86, 0x70, 0x35, 0x20, 0x2c, 0x90, 0x9d, 0x29, 0xdb, 0x30, 0x26, 0x53, 0x22, 0xcc,
	0x08, 0xdd, 0x30, 0x55, 0x74, 0xe4, 0x06, 0x70, 0xcc, 0x06, 0x70, 0xf6, 0x28, 0x49, 0x76, 0xeb,
	0xcf, 0x5e, 0xf4, 0x2a, 0xde, 0x46, 0x21, 0x72, 0x28, 0x03, 0xfb, 0x8f, 0xa0, 0x73, 0xf9, 0x10,
	0x94, 0x15, 0x2e, 0xf1, 0xa7, 0x59, 0x3a, 0x4a, 0xbe, 0x3c, 0x8f, 0xfe, 0x2f, 0x75, 0x78, 0xf3,
	0x5f, 0xdb, 0xfd, 0x25, 0xfc, 0xef, 0x61, 0x2d, 0xc6, 0x91, 0x1f, 0x8f, 0x66, 0x98, 0x71, 0x9a,
	0xd8, 0xd5, 0xad, 0xda, 0x76, 0x7b, 0xf0, 0xe5, 0xab, 0x1a, 0x2f, 0x67, 0x28, 0xc1, 0x0f, 0x15,
	0xf6, 0xbe, 0x3c, 0xa2, 0xd7, 0x8e, 0x73, 0x0b, 0x1a, 0xc2, 0xaa, 0x1f, 0x86, 0x0c, 0x73, 0xae,
	0x32, 0x69, 0x0f, 0x06, 0x4b, 0x10, 0x7f, 0xa4, 0x23, 0xbd, 0x0c, 0x02, 0x05, 0x50, 0x23, 0x21,
	0xb7, 0xeb, 0x2a, 0x85, 0x4f, 0x5f, 0x59, 0x0a, 0x07, 0x21, 0xd7, 0x47, 0x97, 0xe8, 0x9d, 0x13,
	0xd8, 0xb8, 0x98, 0x13, 0xda, 0x80, 0xda, 0x37, 0x78, 0x6e, 0xaa, 0x2a, 0x45, 0x34, 0x84, 0xc6,
	0x89, 0x1f, 0xa7, 0xfa, 0xde, 0xda, 0x83, 0xf7, 0x96, 0x59, 0x1d, 0x39, 0xba, 0xa7, 0x41, 0xee,
	0x54, 0xdf, 0xb7, 0x3a, 0xc7, 0xd0, 0xcc, 0x0e, 0x52, 0xc2, 0x77, 0xef, 0x3c, 0x9f, 0xb3, 0x04,
	0xdf, 0x41, 0xc8, 0x0b, 0x3c, 0xfd, 0x1f, 0xab, 0xd0, 0x2e, 0x1c, 0x01, 0x7d, 0x07, 0xa8, 0xd8,
	0x20, 0x23, 0xd9, 0x81, 0x5c, 0x3d, 0x5a, 0xed, 0xc1, 0xf0, 0xff, 0xa5, 0x55, 0x94, 0x3f, 0x91,
	0x70, 0xba, 0xbc, 0x1b, 0xf1, 0x05, 0x33, 0xba, 0x01, 0xcd, 0x40, 0xb0, 0xf9, 0x88, 0xe1, 0xc8,
	0x0c, 0xc0, 0xaa, 0xd4, 0x3d, 0x1c, 0x75, 0x52, 0xb8, 0x56, 0x8a, 0x52, 0x52, 0x9b, 0xfb, 0xe7,
	0x6b, 0xb3, 0xcc, 0x0a, 0x54, 0xb8, 0x85, 0xea, 0xdc, 0x69, 0xfe, 0xf0, 0xb4, 0x57, 0xf9, 0xeb,
	0x69, 0xaf, 0xd2, 0xff, 0x00, 0x1a, 0xfa, 0x90, 0xd9, 0x84, 0x5a, 0x85, 0x09, 0xcd, 0x1e, 0x67,
	0x33, 0xb5, 0x52, 0x2e, 0x84, 0xfe, 0x6c, 0xc1, 0xaa, 0x69, 0x5e, 0xf4, 0x3a, 0xb4, 0x64, 0xfb,
	0xea, 0x9d, 0xa5, 0x21, 0x9a, 0xd2, 0x70, 0x64, 0xde, 0x73, 0x31, 0x39, 0xf6, 0x59, 0x06, 0x64,
	0x34, 0xb9, 0x00, 0x66, 0x0c, 0x4f, 0x09, 0xc7, 0xd9, 0x02, 0x30, 0x2a, 0xea, 0x40, 0x73, 0x46,
	0xb9, 0x08, 0x68, 0x88, 0xcd, 0x1e, 0x5b, 0xe8, 0xd2, 0x17, 0xd3, 0xc0, 0x8f, 0xe5, 0x8e, 0x6b,
	0x68, 0x5f, 0xa6, 0x17, 0x57, 0xca, 0xca, 0xb9, 0x95, 0x52, 0x38, 0xf6, 0x4d, 0xa8, 0x1d, 0x84,
	0xbc, 0x6c, 0x43, 0x5d, 0xcc, 0xb5, 0xff, 0x93, 0x05, 0x0d, 0xf5, 0x7c, 0x2c, 0xbc, 0x56, 0xee,
	0x55, 0x64, 0x0c, 0xfb, 0x02, 0x87, 0x8b, 0x5b, 0xd5, 0x2a, 0x7a, 0x1b, 0xd6, 0xd5, 0x73, 0x33,
	0x9a, 0xa5, 0x6c, 0x46, 0x17, 0xe9, 0xad, 0x29, 0xe3, 0xa1, 0xb6, 0x21, 0x17, 0x5e, 0xd3, 0x97,
	0x15, 0xe8, 0x7d, 0x3c, 0xc5, 0x62, 0x42, 0x43, 0x93, 0x2e, 0x2a, 0xba, 0x3e, 0x56, 0x1e, 0xb9,
	0xdd, 0x39, 0x89, 0x12, 0x5f, 0xa4, 0x0c, 0x9b, 0xcc, 0x73, 0xc3, 0xee, 0x17, 0xcf, 0x4e, 0xbb,
	0xd6, 0xf3, 0xd3, 0xae, 0xf5, 0xe7, 0x69, 0xd7, 0x7a, 0x72, 0xd6, 0xad, 0x3c, 0x3f, 0xeb, 0x56,
	0x7e, 0x3b, 0xeb, 0x56, 0x1e, 0x7d, 0x18, 0x11, 0x31, 0x49, 0xc7, 0x4e, 0x40, 0xa7, 0xee, 0xa2,
	0x67, 0x5c, 0xdd, 0x33, 0xb7, 0x64, 0xd3, 0xb8, 0x8f, 0xcb, 0xff, 0x3f, 0x5d, 0x99, 0x26, 0x1f,
	0xaf, 0xa8, 0xff, 0xaa, 0x77, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x45, 0x70, 0xf7, 0xbb,
	0x0a, 0x00, 0x00,
}

func (m *VerifiableCredential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifiableCredential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifiableCredential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.CredentialSubject != nil {
		{
			size := m.CredentialSubject.Size()
			i -= size
			if _, err := m.CredentialSubject.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.IssuanceDate != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.IssuanceDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.IssuanceDate):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		for iNdEx := len(m.Type) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Type[iNdEx])
			copy(dAtA[i:], m.Type[iNdEx])
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Type[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Context) > 0 {
		for iNdEx := len(m.Context) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Context[iNdEx])
			copy(dAtA[i:], m.Context[iNdEx])
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Context[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VerifiableCredential_RegulatorCred) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifiableCredential_RegulatorCred) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegulatorCred != nil {
		{
			size, err := m.RegulatorCred.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *VerifiableCredential_RegistrationCred) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifiableCredential_RegistrationCred) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegistrationCred != nil {
		{
			size, err := m.RegistrationCred.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *VerifiableCredential_LicenseCred) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifiableCredential_LicenseCred) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LicenseCred != nil {
		{
			size, err := m.LicenseCred.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *VerifiableCredential_UserCred) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifiableCredential_UserCred) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserCred != nil {
		{
			size, err := m.UserCred.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *UserCredentialSubject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserCredentialSubject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserCredentialSubject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsVerified {
		i--
		if m.IsVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Root) > 0 {
		i -= len(m.Root)
		copy(dAtA[i:], m.Root)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Root)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LicenseCredentialSubject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LicenseCredentialSubject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LicenseCredentialSubject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CirculationLimit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LicenseType) > 0 {
		i -= len(m.LicenseType)
		copy(dAtA[i:], m.LicenseType)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.LicenseType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegulatorCredentialSubject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegulatorCredentialSubject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegulatorCredentialSubject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegistrationCredentialSubject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistrationCredentialSubject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistrationCredentialSubject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for k := range m.Ids {
			v := m.Ids[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintVerifiableCredential(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LegalPerson) > 0 {
		for k := range m.LegalPerson {
			v := m.LegalPerson[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintVerifiableCredential(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LegalPerson) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LegalPerson) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LegalPerson) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CtryReg) > 0 {
		i -= len(m.CtryReg)
		copy(dAtA[i:], m.CtryReg)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.CtryReg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LegalPersonNames) > 0 {
		for k := range m.LegalPersonNames {
			v := m.LegalPersonNames[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintVerifiableCredential(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintVerifiableCredential(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Names) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Names) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Names) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Locality) > 0 {
		i -= len(m.Locality)
		copy(dAtA[i:], m.Locality)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Locality)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Postcode) > 0 {
		i -= len(m.Postcode)
		copy(dAtA[i:], m.Postcode)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Postcode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Premise) > 0 {
		i -= len(m.Premise)
		copy(dAtA[i:], m.Premise)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Premise)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Thfare) > 0 {
		i -= len(m.Thfare)
		copy(dAtA[i:], m.Thfare)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Thfare)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AddrType) > 0 {
		i -= len(m.AddrType)
		copy(dAtA[i:], m.AddrType)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.AddrType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Ids) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ids) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ids) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Proof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VerificationMethod) > 0 {
		i -= len(m.VerificationMethod)
		copy(dAtA[i:], m.VerificationMethod)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.VerificationMethod)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProofPurpose) > 0 {
		i -= len(m.ProofPurpose)
		copy(dAtA[i:], m.ProofPurpose)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.ProofPurpose)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Created) > 0 {
		i -= len(m.Created)
		copy(dAtA[i:], m.Created)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Created)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintVerifiableCredential(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVerifiableCredential(dAtA []byte, offset int, v uint64) int {
	offset -= sovVerifiableCredential(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VerifiableCredential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Context) > 0 {
		for _, s := range m.Context {
			l = len(s)
			n += 1 + l + sovVerifiableCredential(uint64(l))
		}
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	if len(m.Type) > 0 {
		for _, s := range m.Type {
			l = len(s)
			n += 1 + l + sovVerifiableCredential(uint64(l))
		}
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	if m.IssuanceDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.IssuanceDate)
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	if m.CredentialSubject != nil {
		n += m.CredentialSubject.Size()
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	return n
}

func (m *VerifiableCredential_RegulatorCred) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegulatorCred != nil {
		l = m.RegulatorCred.Size()
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	return n
}
func (m *VerifiableCredential_RegistrationCred) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegistrationCred != nil {
		l = m.RegistrationCred.Size()
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	return n
}
func (m *VerifiableCredential_LicenseCred) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LicenseCred != nil {
		l = m.LicenseCred.Size()
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	return n
}
func (m *VerifiableCredential_UserCred) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserCred != nil {
		l = m.UserCred.Size()
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	return n
}
func (m *UserCredentialSubject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	if m.IsVerified {
		n += 2
	}
	return n
}

func (m *LicenseCredentialSubject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.LicenseType)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = m.CirculationLimit.Size()
	n += 1 + l + sovVerifiableCredential(uint64(l))
	return n
}

func (m *RegulatorCredentialSubject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	return n
}

func (m *RegistrationCredentialSubject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	if len(m.LegalPerson) > 0 {
		for k, v := range m.LegalPerson {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovVerifiableCredential(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovVerifiableCredential(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovVerifiableCredential(uint64(mapEntrySize))
		}
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	if len(m.Ids) > 0 {
		for k, v := range m.Ids {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovVerifiableCredential(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovVerifiableCredential(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovVerifiableCredential(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *LegalPerson) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LegalPersonNames) > 0 {
		for k, v := range m.LegalPersonNames {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovVerifiableCredential(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovVerifiableCredential(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovVerifiableCredential(uint64(mapEntrySize))
		}
	}
	l = len(m.CtryReg)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	return n
}

func (m *Names) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	return n
}

func (m *Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AddrType)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Thfare)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Premise)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Postcode)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Locality)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	return n
}

func (m *Ids) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	return n
}

func (m *Proof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Created)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.ProofPurpose)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.VerificationMethod)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovVerifiableCredential(uint64(l))
	}
	return n
}

func sovVerifiableCredential(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVerifiableCredential(x uint64) (n int) {
	return sovVerifiableCredential(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VerifiableCredential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifiableCredential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifiableCredential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = append(m.Context, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = append(m.Type, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuanceDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IssuanceDate == nil {
				m.IssuanceDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.IssuanceDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegulatorCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegulatorCredentialSubject{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CredentialSubject = &VerifiableCredential_RegulatorCred{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegistrationCredentialSubject{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CredentialSubject = &VerifiableCredential_RegistrationCred{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicenseCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LicenseCredentialSubject{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CredentialSubject = &VerifiableCredential_LicenseCred{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UserCredentialSubject{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CredentialSubject = &VerifiableCredential_UserCred{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &Proof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserCredentialSubject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCredentialSubject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCredentialSubject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVerified = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LicenseCredentialSubject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LicenseCredentialSubject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LicenseCredentialSubject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicenseType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LicenseType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CirculationLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CirculationLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegulatorCredentialSubject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegulatorCredentialSubject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegulatorCredentialSubject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistrationCredentialSubject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistrationCredentialSubject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistrationCredentialSubject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegalPerson", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LegalPerson == nil {
				m.LegalPerson = make(map[string]*LegalPerson)
			}
			var mapkey string
			var mapvalue *LegalPerson
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVerifiableCredential
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVerifiableCredential
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthVerifiableCredential
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthVerifiableCredential
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVerifiableCredential
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthVerifiableCredential
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthVerifiableCredential
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LegalPerson{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthVerifiableCredential
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LegalPerson[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ids == nil {
				m.Ids = make(map[string]*Ids)
			}
			var mapkey string
			var mapvalue *Ids
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVerifiableCredential
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVerifiableCredential
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthVerifiableCredential
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthVerifiableCredential
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVerifiableCredential
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthVerifiableCredential
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthVerifiableCredential
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Ids{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthVerifiableCredential
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Ids[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LegalPerson) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LegalPerson: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LegalPerson: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegalPersonNames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LegalPersonNames == nil {
				m.LegalPersonNames = make(map[string]*Names)
			}
			var mapkey string
			var mapvalue *Names
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVerifiableCredential
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVerifiableCredential
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthVerifiableCredential
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthVerifiableCredential
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVerifiableCredential
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthVerifiableCredential
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthVerifiableCredential
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Names{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthVerifiableCredential
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LegalPersonNames[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CtryReg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CtryReg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Names) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Names: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Names: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thfare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thfare = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Premise", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Premise = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Postcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locality", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locality = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ids) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ids: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ids: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Created = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofPurpose", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofPurpose = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerifiableCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVerifiableCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVerifiableCredential(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVerifiableCredential
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVerifiableCredential
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVerifiableCredential
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVerifiableCredential
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVerifiableCredential
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVerifiableCredential        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVerifiableCredential          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVerifiableCredential = fmt.Errorf("proto: unexpected end of group")
)
